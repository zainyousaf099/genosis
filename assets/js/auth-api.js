/**
 * Authentication API Module
 * Handles login and signup API calls
 */

import apiClient, { ApiError } from './api-client.js';

/**
 * Sign Up (Register) a new user
 * @param {Object} userData - User registration data
 * @returns {Promise<Object>} - User data and token
 */
export async function signUp(userData) {
    try {
        console.log('Attempting to sign up...', userData);
        
        // Prepare signup payload - match your API's expected format
        // Based on API docs: POST /User/ expects these fields
        const signupPayload = {
            username: userData.email || userData.username,
            password: userData.password,
            firstName: userData.firstName,
            lastName: userData.lastName,
            role: 0, // Default role
            paymentPlan: 0, // Default payment plan
            paymentDateTime: null, // Use null instead of 0 for datetime (null means not set)
            // DO NOT send companyId - it causes foreign key violation
            // Backend should handle companyId assignment automatically or create a default company
            company: userData.companyName || 'freelance',
            createdDateTime: new Date().toISOString(),
            fullName: `${userData.firstName} ${userData.lastName}`,
            externalUsername: '', // Empty string by default
        };
        
        // Note: We don't send:
        // - id (auto-generated by backend)
        // - companyId (backend must handle this - value 0 doesn't exist in companies table)
        
        console.log('Signup payload:', signupPayload);
        
        // Signup endpoint is POST /User/ (different from login which is POST /Account/)
        // You can override by setting: localStorage.setItem('SIGNUP_ENDPOINT', '/User/');
        const customSignupEndpoint = localStorage.getItem('SIGNUP_ENDPOINT');
        const endpointsToTry = customSignupEndpoint 
            ? [{ path: customSignupEndpoint, description: 'Custom endpoint from localStorage' }]
            : [
                { path: '/User/', description: 'Signup endpoint (confirmed from API docs)' },
                { path: '/User', description: 'Signup endpoint without trailing slash' },
            ];
        
        let lastError = null;
        
        for (const endpoint of endpointsToTry) {
            try {
                console.log(`Trying signup endpoint: ${endpoint.path}`);
                const response = await apiClient.post(endpoint.path, signupPayload);
                console.log('Signup response received:', response);

                // After signup, DON'T automatically log the user in
                // Just return the response - let user login manually
                if (response && response.id) {
                    // Don't set authentication flags - user needs to login
                    // Only save minimal info if needed (don't set isAuthenticated)
                    console.log('Signup successful:', response);
                    console.log(`âœ… Signup successful using endpoint: ${endpoint.path}`);
                    console.log('User will be redirected to login page to login manually');
                    return response;
                }

                return response;
            } catch (error) {
                console.warn(`Signup failed with ${endpoint.path}:`, error.message);
                
                // Handle different error types
                if (error.data && error.data.isCorsError) {
                    // CORS error - try next endpoint
                    console.log(`${endpoint.path} has CORS issue, trying next endpoint...`);
                    lastError = error;
                    continue;
                } else if (error.status === 401) {
                    // 401 Unauthorized - likely wrong endpoint (login endpoint expecting existing user)
                    console.log(`${endpoint.path} returned 401 - this might be the login endpoint, trying next...`);
                    lastError = error;
                    continue;
                } else if (error.status === 404) {
                    // 404 Not Found - wrong endpoint, try next
                    console.log(`${endpoint.path} returned 404 - endpoint not found, trying next...`);
                    lastError = error;
                    continue;
                } else if (error.status && error.status >= 400 && error.status < 500) {
                    // Other 4xx errors (400 Bad Request, 422 Validation, etc.) - might be wrong payload
                    // But could also mean correct endpoint with validation errors
                    console.log(`${endpoint.path} returned ${error.status} - might be validation error or wrong endpoint`);
                    
                    // Check if it's a validation/format error (contains field names, etc.)
                    const errorMessage = error.message?.toLowerCase() || '';
                    if (errorMessage.includes('validation') || errorMessage.includes('field') || errorMessage.includes('required')) {
                        // It might be the right endpoint but wrong payload format
                        throw error; // Throw to show validation error
                    }
                    
                    // Otherwise, try next endpoint
                    lastError = error;
                    continue;
                } else {
                    // Network or other errors
                    lastError = error;
                    // Continue to try next endpoint for network issues
                    if (error.status === 0 || !error.status) {
                        console.log(`${endpoint.path} has network/CORS issue, trying next...`);
                        continue;
                    }
                }
                
                // If we get here and it's not continuing, throw the error
                if (error.status >= 500) {
                    // Server error - don't try other endpoints
                    throw error;
                }
            }
        }
        
        // If all endpoints failed with CORS
        if (lastError && lastError.data && lastError.data.isCorsError) {
            throw new ApiError(
                `All signup endpoints failed with CORS error.\n\n` +
                `Since login works at /Account/, your backend likely needs to:\n` +
                `1. Handle OPTIONS preflight requests for the signup endpoint\n` +
                `2. Or the signup endpoint might be different\n\n` +
                `Backend should return for OPTIONS request:\n` +
                `  Access-Control-Allow-Origin: *\n` +
                `  Access-Control-Allow-Methods: POST, OPTIONS\n` +
                `  Access-Control-Allow-Headers: Content-Type\n\n` +
                `Contact your backend team to enable CORS for the signup endpoint.`,
                0,
                { 
                    originalError: lastError,
                    isCorsError: true,
                    endpointsTried: endpointsToTry.map(e => e.path)
                }
            );
        }
        
        throw lastError || new Error('Signup failed - all endpoints returned errors');
    } catch (error) {
        console.error('Sign up error:', error);
        throw error;
    }
}

/**
 * Sign In (Login) an existing user
 * @param {string} username - Username or email
 * @param {string} password - Password
 * @returns {Promise<Object>} - User data and token
 */
export async function signIn(username, password) {
    try {
        console.log('Attempting to sign in...');
        // API endpoint: POST /Account/ (trailing slash required based on your API)
        const response = await apiClient.post('/Account/', {
            username, // Email or username
            password,
        });

        console.log('Login response received:', response);

        // Note: Your API doesn't return a token in the response
        // If your API uses cookies or session-based auth, the token might be in a cookie
        // Or you might need to extract it from response headers
        
        // Check if response contains authentication info (adjust based on your API)
        // If token is in response headers, extract it:
        // const token = response.headers.get('Authorization')?.replace('Bearer ', '');
        
        // For now, save user ID as identifier (adjust based on your auth mechanism)
        if (response.id) {
            // Store user ID - you may need to adjust this based on your auth system
            localStorage.setItem('user_id', response.id.toString());
            console.log('User ID saved:', response.id);
        }

        // Save complete user data
        if (response) {
            localStorage.setItem('user', JSON.stringify(response));
            console.log('User data saved:', response);
            
            // Also save auth flag for isAuthenticated check
            localStorage.setItem('isAuthenticated', 'true');
        }

        return response;
    } catch (error) {
        console.error('Sign in error:', error);
        throw error;
    }
}

/**
 * Sign Out current user
 */
export function signOut() {
    apiClient.clearToken();
    localStorage.removeItem('user');
    localStorage.removeItem('user_id');
    localStorage.removeItem('isAuthenticated');
}

/**
 * Get current user data
 */
export function getCurrentUser() {
    const userStr = localStorage.getItem('user');
    if (userStr) {
        try {
            return JSON.parse(userStr);
        } catch (e) {
            console.error('Error parsing user data:', e);
            return null;
        }
    }
    return null;
}

/**
 * Refresh authentication token
 */
export async function refreshToken() {
    try {
        const response = await apiClient.post('/auth/refresh', {});
        
        if (response.token) {
            apiClient.setToken(response.token);
        }
        
        return response;
    } catch (error) {
        console.error('Token refresh error:', error);
        signOut(); // Clear token on refresh failure
        throw error;
    }
}

/**
 * Check if user is authenticated
 */
export function isAuthenticated() {
    // Check if user is authenticated based on your API's auth mechanism
    // Adjust this based on whether you use tokens, sessions, cookies, etc.
    const isAuth = localStorage.getItem('isAuthenticated') === 'true' || 
                   localStorage.getItem('user') !== null ||
                   apiClient.isAuthenticated();
    return !!isAuth;
}

